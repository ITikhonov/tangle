=>tangle.py

	Getting filename to tangle from command-line.

-from sys import argv
-f=open(argv[1])

	We will hold a dict of macros, represented as a list of lines each.

-m={'stdout':[]}

	By default everything written into stdout macro, which we'll print out later.

-cm=m['stdout']

	Looping through all lines of file

-empty=True
-text=True

-while True:
-	l=f.readline()
-	if l=='': break

-	prev_empty=empty
-	empty=False

-	prev_text=text
-	text=False

	When we encounter line starting from dash we append to currently selected macro

-	if l.startswith('-'):
-		cm.append(l[1:])

	When we encounter equal sign we change macro, adding new if no one already

-	elif l.startswith('='):
-		name=l[1:].strip()
-		cm=m.get(name)
-		if not cm:
-			cm=[]
-			m[name]=cm

	When we encounter > sign we insert a macro tag for future expansion
	and remember its indentation

-	elif l.startswith('>'):
-		n=l[1:]
-		cm.append((n.strip(),n[:-len(n.lstrip())]))

	When we encounter empty line we remember that

-	elif l.strip()=='':
-		empty=True

	When we encounter text line, check that it has empty line above

-	else:
-		text=True
-		if (not prev_empty) and (not prev_text):
-			print('WARNING! This line probably should be code or have a blank line above:')
-			print(l)

-	if not empty and (prev_text and (not prev_empty) and (not text)):
-		print('WARNING! Line before that probably should be code or have a blank line after:')
-		print(l)



	Macro expander:

-def e(x,i=''):

That is a macro expand it into a list keeping indentation in mind

-	if type(x) is tuple: return e(m[x[0]],i+x[1])

This is a expanded macro expand it into a sting

-	if type(x) is list: return ''.join([e(y,i) for y in x])

This is just a line of text, indent it and return as is

-	return i+x

	Write out all files:

-for x,y in m.items():
-	if x.startswith('>'): open(x[1:],'w').write(e(y))

